// <auto-generated />
using System;
using Knygu_rezervacijos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Knygu_rezervacijos.Migrations
{
    [DbContext(typeof(Knygu_rezervacijosContext))]
    [Migration("20220914082715_MaxLengthOnNames")]
    partial class MaxLengthOnNames
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KnygaSkaitytojas", b =>
                {
                    b.Property<int>("MegstamiausiosId")
                        .HasColumnType("int");

                    b.Property<int>("SkaitytojaiPazymejimoId")
                        .HasColumnType("int");

                    b.HasKey("MegstamiausiosId", "SkaitytojaiPazymejimoId");

                    b.HasIndex("SkaitytojaiPazymejimoId");

                    b.ToTable("KnygaSkaitytojas");
                });

            modelBuilder.Entity("Knygu_rezervacijos.Models.Kategorijos", b =>
                {
                    b.Property<int>("KategorijosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategorijosId"), 1L, 1);

                    b.Property<string>("Kategorija")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KategorijosId");

                    b.ToTable("Kategorijos");
                });

            modelBuilder.Entity("Knygu_rezervacijos.Models.Knyga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KategorijosId")
                        .HasColumnType("int");

                    b.Property<int>("Kiekis")
                        .HasColumnType("int");

                    b.Property<string>("Nuotrauka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pavadinimas")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PuslapiuSkaicius")
                        .HasColumnType("int");

                    b.Property<string>("Santrauka")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KategorijosId");

                    b.ToTable("Knyga");
                });

            modelBuilder.Entity("Knygu_rezervacijos.Models.Rezervacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("KnygaId")
                        .HasColumnType("int");

                    b.Property<int>("KnyguKiekis")
                        .HasColumnType("int");

                    b.Property<int?>("SkaitytojasPazymejimoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KnygaId");

                    b.HasIndex("SkaitytojasPazymejimoId");

                    b.ToTable("Rezervacija");
                });

            modelBuilder.Entity("Knygu_rezervacijos.Models.Skaitytojas", b =>
                {
                    b.Property<int>("PazymejimoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PazymejimoId"), 1L, 1);

                    b.Property<string>("Pavarde")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PazymejimoIsdavimoData")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slaptazodis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vardas")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PazymejimoId");

                    b.ToTable("Skaitytojas");
                });

            modelBuilder.Entity("KnygaSkaitytojas", b =>
                {
                    b.HasOne("Knygu_rezervacijos.Models.Knyga", null)
                        .WithMany()
                        .HasForeignKey("MegstamiausiosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Knygu_rezervacijos.Models.Skaitytojas", null)
                        .WithMany()
                        .HasForeignKey("SkaitytojaiPazymejimoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Knygu_rezervacijos.Models.Knyga", b =>
                {
                    b.HasOne("Knygu_rezervacijos.Models.Kategorijos", "Kategorijos")
                        .WithMany("Knyga")
                        .HasForeignKey("KategorijosId");

                    b.Navigation("Kategorijos");
                });

            modelBuilder.Entity("Knygu_rezervacijos.Models.Rezervacija", b =>
                {
                    b.HasOne("Knygu_rezervacijos.Models.Knyga", "Knyga")
                        .WithMany("Rezervacijos")
                        .HasForeignKey("KnygaId");

                    b.HasOne("Knygu_rezervacijos.Models.Skaitytojas", "Skaitytojas")
                        .WithMany("Rezervacijos")
                        .HasForeignKey("SkaitytojasPazymejimoId");

                    b.Navigation("Knyga");

                    b.Navigation("Skaitytojas");
                });

            modelBuilder.Entity("Knygu_rezervacijos.Models.Kategorijos", b =>
                {
                    b.Navigation("Knyga");
                });

            modelBuilder.Entity("Knygu_rezervacijos.Models.Knyga", b =>
                {
                    b.Navigation("Rezervacijos");
                });

            modelBuilder.Entity("Knygu_rezervacijos.Models.Skaitytojas", b =>
                {
                    b.Navigation("Rezervacijos");
                });
#pragma warning restore 612, 618
        }
    }
}
